plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.10.0'
    //id 'com.bmuschko.docker-remote-api' version '3.5.0'
}

apply from: 'dependencies.gradle'
apply from: 'gradle/functional-test.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar.baseName = 'gretl'
description = 'gretl gradle plugin'

group 'ch.so.agi'
version '1.0.5'+System.getProperty('release', "-SNAPSHOT") // -Drelease

allprojects {
    repositories {
        mavenLocal()
        maven {
            url "http://jars.interlis.ch"
        }
        maven {
            url "http://download.osgeo.org/webdav/geotools/"
        }
        mavenCentral()
        jcenter()
    }
}

dependencies {
    runtimeOnly postgresqlDependency
    runtimeOnly sqliteJdbcDependency
    runtimeOnly derbyDependency
    //runtimeOnly oracleDependency

    implementation ilivalidatorDependency
    implementation(ili2pgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    implementation ioxWkfDependency
    implementation ioxIliDependency
    implementation ehiSqlgenDependency

    implementation apacheCommonsIoDependency
    implementation apacheCommonsNetDependency

    testImplementation junitDependency
}

gradlePlugin {
    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/sogis/gretl' 
    vcsUrl = 'https://github.com/sogis/gretl.git' 
    tags = ['etl', 'gis', 'sdi', 'geo', 'geoinformation', 'interlis', 'geopackage', 'shapefile', 'csv', 'database', 'postgresql', 'sqlite', 'ili2pg', 'ilivalidator'] 
    
    plugins { 
        gretlPlugin {  
            displayName = 'GRETL' 
            description = 'The Gradle gretl plugin extends gradle for use as a sql-centric (geo)data etl. gretl = gradle etl.' 
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

// Transfer the required configuration variables to all test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI_PG = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI_PG, findProperty(GRETLTEST_DBURI_PG))

    def GRETLTEST_DBURI_ORA = 'gretltest_dburi_ora'
    systemProperty(GRETLTEST_DBURI_ORA, findProperty(GRETLTEST_DBURI_ORA))

    println 'dburi_pg: ' + getSystemProperties().getAt(GRETLTEST_DBURI_PG)
    println 'dburi_ora: ' + getSystemProperties().getAt(GRETLTEST_DBURI_ORA)
}

// Disable very strict javadoc generation, e.g. handling of ">" in comments.
// https://stackoverflow.com/questions/34874175/disable-all-javadoc-in-gradle
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}